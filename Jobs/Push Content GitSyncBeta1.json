{
    "lastRunStatus": 0,
    "lastRunTime": 1741071242237,
    "uniqueIdentifier": "0b2b32eb-a7cf-485c-aa6a-a00c2d5cdce1",
    "id": 0,
    "jobDefinitionId": 0,
    "name": "Push Content GitSyncBeta1",
    "integration": "GitSyncBeta",
    "script": "from io import BytesIO\n\nfrom GitSyncManager import GitSyncManager\nfrom SiemplifyJob import SiemplifyJob\nfrom SiemplifyUtils import output_handler\nfrom constants import (\n    ALL_ENVIRONMENTS_IDENTIFIER,\n    AVAILABLE_CONTENT,\n    IGNORED_INTEGRATIONS,\n    IGNORED_JOBS,\n    INTEGRATION_NAME,\n)\nfrom definitions import Connector, Integration, Job, Mapping, VisualFamily, Workflow\n\n\nSCRIPT_NAME = \"Push Content\"\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyJob()\n    siemplify.script_name = SCRIPT_NAME\n\n    commit_msg = siemplify.extract_job_param(\"Commit\")\n    commit_passwords = siemplify.extract_job_param(\"Commit Passwords\", input_type=bool)\n\n    # Features\n    features = {}\n    for feature in AVAILABLE_CONTENT:\n        features[feature] = siemplify.extract_job_param(feature, input_type=bool)\n\n    try:\n        gitsync = GitSyncManager.from_siemplify_object(siemplify)\n\n        # Integrations\n        if features[\"Integrations\"]:\n            siemplify.LOGGER.info(\"========== Integrations ==========\")\n            for integration in [\n                x\n                for x in gitsync.api.get_ide_cards()\n                if x.get(\"identifier\") not in IGNORED_INTEGRATIONS\n            ]:\n                siemplify.LOGGER.info(f\"Pushing {integration['identifier']}\")\n                integration_obj = Integration(\n                    integration,\n                    BytesIO(gitsync.api.export_package(integration[\"identifier\"])),\n                )\n                try:\n                    gitsync.content.push_integration(integration_obj)\n                except Exception as e:\n                    siemplify.LOGGER.error(\n                        f\"Couldn't upload {integration_obj.identifier}. ERROR: {e}\"\n                    )\n\n        # Playbooks\n        if features[\"Playbooks\"]:\n            siemplify.LOGGER.info(\"========== Playbooks ==========\")\n            for playbook in gitsync.api.get_playbooks():\n                siemplify.LOGGER.info(f\"Pushing {playbook['name']}\")\n                playbook = gitsync.api.get_playbook(playbook[\"identifier\"])\n                gitsync.content.push_playbook(Workflow(playbook))\n\n        # Jobs\n        if features[\"Jobs\"]:\n            siemplify.LOGGER.info(\"========== Jobs ==========\")\n            for job in [\n                x\n                for x in gitsync.api.get_jobs()\n                if x.get(\"name\") not in IGNORED_JOBS\n                and x.get(\"integration\") != INTEGRATION_NAME\n                and not x.get(\"name\").startswith(\"Cases Collector DB\")\n                and not x.get(\"name\").startswith(\"Logs Collector\")\n            ]:\n                siemplify.LOGGER.info(f\"Pushing {job['name']}\")\n                gitsync.content.push_job(Job(job))\n\n        # Connectors\n        if features[\"Connectors\"]:\n            siemplify.LOGGER.info(\"========== Connectors ==========\")\n            for connector in gitsync.api.get_connectors():\n                siemplify.LOGGER.info(f\"Pushing {connector['displayName']}\")\n                gitsync.content.push_connector(Connector(connector))\n\n        # Simulated Cases\n        if features[\"Simulated Cases\"]:\n            siemplify.LOGGER.info(\"========== Simulated Cases ==========\")\n            for case in gitsync.api.get_simulated_cases():\n                siemplify.LOGGER.info(f\"Pushing {case}\")\n                gitsync.content.push_simulated_case(\n                    case, gitsync.api.export_simulated_case(case)\n                )\n\n        # Integration Instances\n        if features[\"Integration Instances\"]:\n            siemplify.LOGGER.info(\"========== Integration Instances ==========\")\n            integration_instances = []\n            for environment in gitsync.api.get_environment_names() + [\n                ALL_ENVIRONMENTS_IDENTIFIER\n            ]:\n                for instance in [\n                    x\n                    for x in gitsync.api.get_integrations_instances(environment)\n                    if x.get(\"integrationIdentifier\") not in IGNORED_INTEGRATIONS\n                ]:\n                    siemplify.LOGGER.info(f\"Pushing {instance['instanceName']}\")\n                    settings = gitsync.api.get_integration_instance_settings(\n                        instance[\"identifier\"]\n                    )\n                    for (\n                        sett\n                    ) in (\n                        settings\n                    ):  # Remove Agent Identifiers from settings - should be created separately\n                        if sett[\"propertyName\"] == \"AgentIdentifier\":\n                            sett[\"value\"] = None\n                        sett[\"creationTimeUnixTimeInMs\"] = 0\n                        sett[\"modificationTimeUnixTimeInMs\"] = 0\n                    if commit_passwords:\n                        try:\n                            secrets = siemplify.get_configuration(\n                                instance[\"identifier\"]\n                            )\n                            for prop in settings:\n                                if prop[\"propertyType\"] == 3:\n                                    try:\n                                        prop[\"value\"] = secrets[prop[\"propertyName\"]]\n                                    except KeyError:\n                                        siemplify.LOGGER.warn(\n                                            f\"{instance['instanceName']} was updated with new \"\n                                            f\"parameters but they weren't configured.\"\n                                        )\n                                        pass\n                        except Exception:\n                            siemplify.LOGGER.warn(\n                                f\"{instance['identifier']} is not configured. Skipping passwords\"\n                            )\n\n                    integration_instances.append(\n                        {\n                            \"environment\": environment,\n                            \"integrationIdentifier\": instance[\"integrationIdentifier\"],\n                            \"settings\": {\n                                \"instanceDescription\": instance[\"instanceDescription\"],\n                                \"instanceName\": instance[\"instanceName\"],\n                                \"settings\": settings,\n                            },\n                        }\n                    )\n            gitsync.content.push_integration_instances(integration_instances)\n\n        # Ontology - Visual Families\n        if features[\"Visual Families\"]:\n            siemplify.LOGGER.info(\"========== Visual Families ==========\")\n            for visualFamily in gitsync.api.get_custom_families():\n                siemplify.LOGGER.info(f\"Pushing {visualFamily['family']}\")\n                gitsync.content.push_visual_family(\n                    VisualFamily(gitsync.api.get_custom_family(visualFamily[\"id\"]))\n                )\n\n        # Ontology - Mappings\n        if features[\"Mappings\"]:\n            siemplify.LOGGER.info(\"========== Mappings ==========\")\n            all_records = gitsync.api.get_ontology_records()\n            records_integrations = set([x[\"source\"] for x in all_records])\n            for integration in records_integrations:\n                siemplify.LOGGER.info(f\"Pushing {integration} mappings\")\n                if integration:\n                    records = [x for x in all_records if x[\"source\"] == integration]\n                    if not records:\n                        continue\n                    rules = []\n                    for record in records:\n                        record[\"exampleEventFields\"] = []  # remove event assets\n                        rule = gitsync.api.get_mapping_rules(\n                            record[\"source\"], record[\"product\"], record[\"eventName\"]\n                        )\n                        for r in rule[\"familyFields\"] + rule[\"systemFields\"]:\n                            # remove bad rules with no source\n                            if (\n                                r[\"mappingRule\"][\"source\"]\n                                and r[\"mappingRule\"][\"source\"].lower()\n                                == integration.lower()\n                            ):\n                                rules.append(rule)\n                                break\n\n                    gitsync.content.push_mapping(Mapping(integration, records, rules))\n\n        # Other settings\n        siemplify.LOGGER.info(\"========== Settings ==========\")\n        if features[\"Environments\"]:\n            siemplify.LOGGER.info(f\"Pushing environments\")\n            environments = gitsync.api.get_environments()\n            for environment in environments:\n                environment[\"id\"] = 0\n            gitsync.content.push_environments(environments)\n\n        if features[\"Dynamic Parameters\"]:\n            siemplify.LOGGER.info(\"Pushing dynamic parameters\")\n            gitsync.content.push_dynamic_parameters(\n                gitsync.api.get_env_dynamic_parameters()\n            )\n\n        if features[\"Logo\"]:\n            siemplify.LOGGER.info(\"Pushing logo\")\n            logo = gitsync.api.get_logo()\n            if logo[\"imageBase64\"]:\n                # A custom logo is configured.\n                logo[\"imageBase64\"] = \"data:image/png;base64,\" + logo[\"imageBase64\"]\n            gitsync.content.push_logo(logo)\n\n        if features[\"Case Tags\"]:\n            siemplify.LOGGER.info(\"Pushing case tags\")\n            gitsync.content.push_tags(gitsync.api.get_case_tags())\n\n        if features[\"Case Stages\"]:\n            siemplify.LOGGER.info(\"Pushing case stages\")\n            gitsync.content.push_stages(gitsync.api.get_case_stages())\n\n        if features[\"Case Title Settings\"]:\n            siemplify.LOGGER.info(\"Pushing case title settings\")\n            gitsync.content.push_case_titles(gitsync.api.get_case_title_settings())\n\n        if features[\"Case Close Reasons\"]:\n            siemplify.LOGGER.info(\"Pushing case close reasons\")\n            gitsync.content.push_case_close_causes(gitsync.api.get_close_reasons())\n\n        if features[\"Networks\"]:\n            siemplify.LOGGER.info(\"Pushing networks\")\n            gitsync.content.push_networks(gitsync.api.get_networks())\n\n        if features[\"Domains\"]:\n            siemplify.LOGGER.info(\"Pushing domains\")\n            gitsync.content.push_domains(gitsync.api.get_domains())\n\n        if features[\"Custom Lists\"]:\n            siemplify.LOGGER.info(\"Pushing custom lists\")\n            gitsync.content.push_custom_lists(gitsync.api.get_custom_lists())\n\n        if features[\"Email Templates\"]:\n            siemplify.LOGGER.info(\"Pushing email templates\")\n            gitsync.content.push_email_templates(gitsync.api.get_email_templates())\n\n        if features[\"Blacklists\"]:\n            siemplify.LOGGER.info(\"Pushing blacklists\")\n            gitsync.content.push_blacklists(gitsync.api.get_blacklists())\n\n        if features[\"SLA Records\"]:\n            siemplify.LOGGER.info(\"Pushing SLA records\")\n            gitsync.content.push_sla_definitions(gitsync.api.get_sla_records())\n\n        siemplify.LOGGER.info(f\"Done! uploading everything to git\")\n        gitsync.commit_and_push(commit_msg)\n\n    except Exception as e:\n        siemplify.LOGGER.error(f\"General error performing Job {SCRIPT_NAME}\")\n        siemplify.LOGGER.exception(e)\n        raise\n\n    siemplify.end_script()\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "creator": "Admin",
    "description": "Push all content of this platform to git",
    "isEnabled": false,
    "isCustom": true,
    "version": 1,
    "parameters": [
        {
            "id": 125,
            "isMandatory": true,
            "name": "Commit",
            "type": 2,
            "value": "Push Content GitSyncBeta1 job after change"
        },
        {
            "id": 126,
            "isMandatory": false,
            "name": "Repo URL",
            "type": 2,
            "value": "https://github.com/itachi-uchiha-legend/testing.git"
        },
        {
            "id": 127,
            "isMandatory": false,
            "name": "Branch",
            "type": 2,
            "value": "main"
        },
        {
            "id": 128,
            "isMandatory": false,
            "name": "Commit Author",
            "type": 2,
            "value": "itachi-uchiha-legend <rkumbhar@google.com>"
        },
        {
            "id": 129,
            "isMandatory": false,
            "name": "Commit Passwords",
            "type": 0,
            "value": "false"
        },
        {
            "id": 130,
            "isMandatory": false,
            "name": "Integrations",
            "type": 0,
            "value": "true"
        },
        {
            "id": 131,
            "isMandatory": false,
            "name": "Playbooks",
            "type": 0,
            "value": "true"
        },
        {
            "id": 132,
            "isMandatory": false,
            "name": "Jobs",
            "type": 0,
            "value": "true"
        },
        {
            "id": 133,
            "isMandatory": false,
            "name": "Connectors",
            "type": 0,
            "value": "true"
        },
        {
            "id": 134,
            "isMandatory": false,
            "name": "Integration Instances",
            "type": 0,
            "value": "true"
        },
        {
            "id": 135,
            "isMandatory": false,
            "name": "Visual Families",
            "type": 0,
            "value": "true"
        },
        {
            "id": 136,
            "isMandatory": false,
            "name": "Mappings",
            "type": 0,
            "value": "true"
        },
        {
            "id": 137,
            "isMandatory": false,
            "name": "Environments",
            "type": 0,
            "value": "true"
        },
        {
            "id": 138,
            "isMandatory": false,
            "name": "Dynamic Parameters",
            "type": 0,
            "value": "true"
        },
        {
            "id": 139,
            "isMandatory": false,
            "name": "Logo",
            "type": 0,
            "value": "true"
        },
        {
            "id": 140,
            "isMandatory": false,
            "name": "Case Tags",
            "type": 0,
            "value": "true"
        },
        {
            "id": 141,
            "isMandatory": false,
            "name": "Case Stages",
            "type": 0,
            "value": "true"
        },
        {
            "id": 142,
            "isMandatory": false,
            "name": "Case Title Settings",
            "type": 0,
            "value": "true"
        },
        {
            "id": 143,
            "isMandatory": false,
            "name": "Case Close Reasons",
            "type": 0,
            "value": "true"
        },
        {
            "id": 144,
            "isMandatory": false,
            "name": "Networks",
            "type": 0,
            "value": "true"
        },
        {
            "id": 145,
            "isMandatory": false,
            "name": "Domains",
            "type": 0,
            "value": "true"
        },
        {
            "id": 146,
            "isMandatory": false,
            "name": "Custom Lists",
            "type": 0,
            "value": "true"
        },
        {
            "id": 147,
            "isMandatory": false,
            "name": "Email Templates",
            "type": 0,
            "value": "true"
        },
        {
            "id": 148,
            "isMandatory": false,
            "name": "Blacklists",
            "type": 0,
            "value": "true"
        },
        {
            "id": 149,
            "isMandatory": false,
            "name": "SLA Records",
            "type": 0,
            "value": "true"
        },
        {
            "id": 150,
            "isMandatory": false,
            "name": "Simulated Cases",
            "type": 0,
            "value": "true"
        }
    ],
    "runIntervalInSeconds": 60,
    "creationTime": "2025-03-03T11:38:19.549Z",
    "lastModificationTime": "2025-03-07T11:48:40.986Z",
    "isSystemJob": false,
    "jobDefinitionName": "Push Content GitSyncBeta",
    "agentIdentifier": null
}