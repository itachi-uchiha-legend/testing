{
    "lastRunStatus": 0,
    "lastRunTime": 1741349449123,
    "uniqueIdentifier": "ab36b73f-e8cb-46a8-95ec-49243aff5508",
    "id": 0,
    "jobDefinitionId": 0,
    "name": "Pull Content GitSyncBeta",
    "integration": "GitSyncBeta",
    "script": "from GitSyncManager import GitSyncManager\nfrom SiemplifyJob import SiemplifyJob\nfrom SiemplifyUtils import output_handler\nfrom constants import (\n    ALL_ENVIRONMENTS_IDENTIFIER,\n    AVAILABLE_CONTENT,\n    IGNORED_INTEGRATIONS,\n)\n\n\nSCRIPT_NAME = \"Pull Content\"\n\n\ndef id_validator(resource, fields_to_compare, id_field, current_state):\n    resource[id_field] = 0\n    if isinstance(fields_to_compare, str):\n        fields_to_compare = [fields_to_compare]\n    current = next(\n        (\n            x\n            for x in current_state\n            if all(x[y] == resource[y] for y in fields_to_compare)\n        ),\n        None,\n    )\n    if current:\n        resource[id_field] = current[id_field]\n    return resource\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyJob()\n    siemplify.script_name = SCRIPT_NAME\n\n    features = {}\n    for feature in AVAILABLE_CONTENT:\n        features[feature] = siemplify.extract_job_param(feature, input_type=bool)\n\n    try:\n        gitsync = GitSyncManager.from_siemplify_object(siemplify)\n\n        if features[\"Dynamic Parameters\"]:\n            siemplify.LOGGER.info(\n                \"========== Environment Dynamic Parameters ==========\"\n            )\n            current_parameters = gitsync.api.get_env_dynamic_parameters()\n            for dynParam in gitsync.content.get_dynamic_parameters():\n                siemplify.LOGGER.info(\n                    f\"Adding dynamic parameter {dynParam.get('name')}\"\n                )\n                gitsync.api.add_dynamic_env_param(\n                    id_validator(dynParam, \"name\", \"id\", current_parameters)\n                )\n\n        if features[\"Environments\"]:\n            siemplify.LOGGER.info(\"========== Environments ==========\")\n            all_environments_names = gitsync.api.get_environment_names()\n            for environment in gitsync.content.get_environments():\n                if environment.get(\"name\") in all_environments_names:\n                    existing_env_id = next(\n                        x[\"id\"]\n                        for x in gitsync.api.get_environments()\n                        if x.get(\"name\") == environment.get(\"name\")\n                    )\n                    environment[\"id\"] = existing_env_id\n                    siemplify.LOGGER.info(\n                        f\"Updating environment {environment.get('name')}\"\n                    )\n                else:\n                    siemplify.LOGGER.info(\n                        f\"Adding environment {environment.get('name')}\"\n                    )\n\n                gitsync.api.import_environment(environment)\n\n        if features[\"Integrations\"]:\n            siemplify.LOGGER.info(\"========== Integrations ==========\")\n            for integration in gitsync.content.get_integrations():\n                gitsync.install_integration(integration)\n            gitsync.clear_cache()\n\n        if features[\"Integration Instances\"]:\n            siemplify.LOGGER.info(\"========== Integration instances ==========\")\n            current_instances = [\n                *gitsync.api.get_integrations_instances(ALL_ENVIRONMENTS_IDENTIFIER)\n            ]\n            for env in gitsync.api.get_environment_names():\n                current_instances.extend(gitsync.api.get_integrations_instances(env))\n            for instance in gitsync.content.get_integration_instances():\n                if instance[\"integrationIdentifier\"] not in IGNORED_INTEGRATIONS:\n                    current = next(\n                        (\n                            x\n                            for x in current_instances\n                            if x[\"environmentIdentifier\"] == instance[\"environment\"]\n                            and x[\"integrationIdentifier\"]\n                            == instance[\"integrationIdentifier\"]\n                            and x[\"instanceName\"]\n                            == instance[\"settings\"][\"instanceName\"]\n                        ),\n                        None,\n                    )\n                    if current:\n                        siemplify.LOGGER.info(\n                            f\"Updating {instance['settings']['instanceName']}\"\n                        )\n                        instance_to_update = current\n                    else:\n                        siemplify.LOGGER.info(\n                            f\"Installing {instance['settings']['instanceName']}\"\n                        )\n                        instance_to_update = gitsync.api.create_integrations_instance(\n                            instance[\"integrationIdentifier\"], instance[\"environment\"]\n                        )\n                    for i in instance[\"settings\"][\"settings\"]:\n                        i[\"integrationInstance\"] = instance_to_update[\"identifier\"]\n\n                    gitsync.api.save_integration_instance_settings(\n                        instance_to_update[\"identifier\"], instance[\"settings\"]\n                    )\n\n        if features[\"Playbooks\"]:\n            siemplify.LOGGER.info(\"========== Playbooks ==========\")\n            gitsync.install_workflows(list(gitsync.content.get_playbooks()))\n\n        if features[\"Connectors\"]:\n            siemplify.LOGGER.info(\"========== Connectors ==========\")\n            for connector in gitsync.content.get_connectors():\n                siemplify.LOGGER.info(f\"Installing {connector.name}\")\n                gitsync.install_connector(connector)\n\n        if features[\"Jobs\"]:\n            siemplify.LOGGER.info(\"========== Jobs ==========\")\n            for job in gitsync.content.get_jobs():\n                siemplify.LOGGER.info(f\"Installing {job.name}\")\n                gitsync.install_job(job)\n\n        if features[\"Simulated Cases\"]:\n            siemplify.LOGGER.info(\"Installing Simulated Cases\")\n            for case in gitsync.content.get_simulated_cases():\n                gitsync.api.import_simulated_case(case)\n\n        if features[\"Case Tags\"]:\n            siemplify.LOGGER.info(\"Installing tags\")\n            current_tags = gitsync.api.get_case_tags()\n            for tag in gitsync.content.get_tags():\n                gitsync.api.add_case_tag(id_validator(tag, \"name\", \"id\", current_tags))\n\n        if features[\"Case Stages\"]:\n            siemplify.LOGGER.info(\"Installing stages\")\n            current_stages = gitsync.api.get_case_stages()\n            for stage in gitsync.content.get_stages():\n                gitsync.api.add_case_stage(\n                    id_validator(stage, \"name\", \"id\", current_stages)\n                )\n\n        if features[\"Case Close Reasons\"]:\n            siemplify.LOGGER.info(\"Installing case close reasons\")\n            current_causes = gitsync.api.get_close_reasons()\n            for cause in gitsync.content.get_case_close_causes():\n                gitsync.api.add_close_reason(\n                    id_validator(\n                        cause, (\"rootCause\", \"forCloseReason\"), \"id\", current_causes\n                    )\n                )\n\n        if features[\"Case Title Settings\"]:\n            case_title_settings = gitsync.content.get_case_titles()\n            if case_title_settings:\n                siemplify.LOGGER.info(\"Installing case title settings\")\n                gitsync.api.save_case_title_settings(case_title_settings)\n\n        if features[\"Visual Families\"]:\n            siemplify.LOGGER.info(\"Installing visual families\")\n            current_vfs = gitsync.api.get_custom_families()\n            for family in gitsync.content.get_visual_families():\n                gitsync.api.add_custom_family(\n                    {\n                        \"visualFamilyDataModel\": (\n                            id_validator(family.raw_data, \"family\", \"id\", current_vfs)\n                        )\n                    }\n                )\n\n        if features[\"Mappings\"]:\n            siemplify.LOGGER.info(\"Installing mappings\")\n            for mapping in gitsync.content.get_mappings():\n                gitsync.install_mappings(mapping)\n\n        if features[\"Networks\"]:\n            siemplify.LOGGER.info(\"Installing networks\")\n            current_networks = gitsync.api.get_networks()\n            for network in gitsync.content.get_networks():\n                gitsync.api.update_network(\n                    id_validator(network, \"name\", \"id\", current_networks)\n                )\n\n        if features[\"Domains\"]:\n            siemplify.LOGGER.info(\"Installing domains\")\n            current_domains = gitsync.api.get_domains()\n            for domain in gitsync.content.get_domains():\n                gitsync.api.update_domain(\n                    id_validator(domain, \"domain\", \"id\", current_domains)\n                )\n\n        if features[\"Custom Lists\"]:\n            siemplify.LOGGER.info(\"Installing custom lists\")\n            for lst in gitsync.content.get_custom_lists():\n                gitsync.api.update_custom_list(lst)\n\n        if features[\"Email Templates\"]:\n            siemplify.LOGGER.info(\"Installing email templates\")\n            current_templates = gitsync.api.get_email_templates()\n            for template in gitsync.content.get_email_templates():\n                gitsync.api.add_email_template(\n                    id_validator(template, \"name\", \"id\", current_templates)\n                )\n\n        if features[\"Blacklists\"]:\n            siemplify.LOGGER.info(\"Installing blacklists\")\n            for bl in gitsync.content.get_blacklists():\n                gitsync.api.update_blacklist(bl)\n\n        if features[\"SLA Records\"]:\n            siemplify.LOGGER.info(\"Installing SLA definition\")\n            for definition in gitsync.content.get_sla_definitions():\n                gitsync.api.update_sla_record(definition)\n\n        if features[\"Logo\"]:\n            if not gitsync.content.get_logo():\n                siemplify.LOGGER.info(\"Logo not found. Skipping\")\n            else:\n                siemplify.LOGGER.info(\"Installing Logo\")\n                gitsync.api.update_logo(gitsync.content.get_logo())\n\n        siemplify.LOGGER.info(\"Finished Successfully\")\n\n    except Exception as e:\n        siemplify.LOGGER.error(f\"General error performing Job {SCRIPT_NAME}\")\n        siemplify.LOGGER.exception(e)\n        raise\n\n    siemplify.end_script()\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "creator": "Admin",
    "description": "Installs content from the repo.",
    "isEnabled": true,
    "isCustom": true,
    "version": 1,
    "parameters": [
        {
            "id": 214267,
            "isMandatory": false,
            "name": "Repo URL",
            "type": 2,
            "value": "https://github.com/itachi-uchiha-legend/testing.git"
        },
        {
            "id": 214268,
            "isMandatory": false,
            "name": "Branch",
            "type": 2,
            "value": "main"
        },
        {
            "id": 214269,
            "isMandatory": false,
            "name": "Integrations",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214270,
            "isMandatory": false,
            "name": "Playbooks",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214271,
            "isMandatory": false,
            "name": "Jobs",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214272,
            "isMandatory": false,
            "name": "Connectors",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214273,
            "isMandatory": false,
            "name": "Integration Instances",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214274,
            "isMandatory": false,
            "name": "Visual Families",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214275,
            "isMandatory": false,
            "name": "Mappings",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214276,
            "isMandatory": false,
            "name": "Environments",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214277,
            "isMandatory": false,
            "name": "Dynamic Parameters",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214278,
            "isMandatory": false,
            "name": "Logo",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214279,
            "isMandatory": false,
            "name": "Case Tags",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214280,
            "isMandatory": false,
            "name": "Case Stages",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214281,
            "isMandatory": false,
            "name": "Case Title Settings",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214282,
            "isMandatory": false,
            "name": "Case Close Reasons",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214283,
            "isMandatory": false,
            "name": "Networks",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214284,
            "isMandatory": false,
            "name": "Domains",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214285,
            "isMandatory": false,
            "name": "Custom Lists",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214286,
            "isMandatory": false,
            "name": "Email Templates",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214287,
            "isMandatory": false,
            "name": "Blacklists",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214288,
            "isMandatory": false,
            "name": "SLA Records",
            "type": 0,
            "value": "true"
        },
        {
            "id": 214289,
            "isMandatory": false,
            "name": "Simulated Cases",
            "type": 0,
            "value": "true"
        }
    ],
    "runIntervalInSeconds": 60,
    "creationTime": "2025-03-03T11:43:27.818Z",
    "lastModificationTime": "2025-03-07T12:10:49.133Z",
    "isSystemJob": false,
    "jobDefinitionName": "Pull Content GitSyncBeta",
    "agentIdentifier": null
}