{"Name":"Pull Connector GitSyncBeta","Integration":"GitSyncBeta","Script":"from GitSyncManager import GitSyncManager\nfrom SiemplifyJob import SiemplifyJob\nfrom SiemplifyUtils import output_handler\n\nSCRIPT_NAME = \"Pull Connector\"\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyJob()\n    siemplify.script_name = SCRIPT_NAME\n\n    connector_name = siemplify.extract_job_param(\"Connector Name\")\n    include_vf = siemplify.extract_job_param(\"Include Visual Families\", input_type=bool)\n    include_mappings = siemplify.extract_job_param(\"Include Mappings\", input_type=bool)\n\n    try:\n        gitsync = GitSyncManager.from_siemplify_object(siemplify)\n\n        connector = gitsync.content.get_connector(connector_name)\n        if connector:\n            siemplify.LOGGER.info(f\"Installing Connector {connector_name}\")\n            gitsync.install_connector(connector)\n            siemplify.LOGGER.info(\n                f\"Connector {connector_name} - successfully installed\"\n            )\n\n            if include_vf or include_mappings:\n                mappings = gitsync.content.get_mapping(connector.integration)\n                if mappings:\n                    installed_visual_families = [\n                        x.get(\"family\") for x in gitsync.api.get_custom_families(True)\n                    ]\n                    visual_families = set(\n                        [\n                            x.get(\"familyName\")\n                            for x in mappings.records\n                            if x.get(\"familyName\") not in installed_visual_families\n                        ]\n                    )\n\n                    if include_vf:\n                        siemplify.LOGGER.info(f\"Installing Visual Families\")\n                        for vf in visual_families:\n                            siemplify.LOGGER.info(f\"Pulling visual family {vf}\")\n                            gitsync.api.add_custom_family(\n                                gitsync.content.get_visual_family(vf).raw_data\n                            )\n\n                    if include_mappings:\n                        siemplify.LOGGER.info(f\"Installing Mappings\")\n                        gitsync.install_mappings(mappings)\n\n    except Exception as e:\n        siemplify.LOGGER.error(f\"General error performing Job {SCRIPT_NAME}\")\n        siemplify.LOGGER.exception(e)\n        raise\n\n    siemplify.end_script()\n\n\nif __name__ == \"__main__\":\n    main()\n","Creator":"Admin","RunIntervalInSeconds":900,"Description":"Imports a connector from the repo.","IsEnabled":true,"IsCustom":true,"Version":1,"IsSystem":false,"Parameters":[{"JobDefinitionId":107,"IsMandatory":false,"DefaultValue":null,"Description":"Optional parameter to override the one found in the integration instance","Name":"Repo URL","Type":2},{"JobDefinitionId":107,"IsMandatory":false,"DefaultValue":null,"Description":"Optional parameter to override the one found in the integration instance","Name":"Branch","Type":2},{"JobDefinitionId":107,"IsMandatory":true,"DefaultValue":"","Description":"Name of the connector to pull","Name":"Connector Name","Type":2},{"JobDefinitionId":107,"IsMandatory":false,"DefaultValue":"false","Description":"Whether to include related visual families that the connector alert use","Name":"Include Visual Families","Type":0},{"JobDefinitionId":107,"IsMandatory":false,"DefaultValue":"false","Description":"Whether to include related mappings that the connector alerts use","Name":"Include Mappings","Type":0}],"PythonVersion":"None"}