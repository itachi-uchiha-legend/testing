{"Name":"Pull Integration GitSyncBeta","Integration":"GitSyncBeta","Script":"from GitSyncManager import GitSyncManager\nfrom SiemplifyJob import SiemplifyJob\nfrom SiemplifyUtils import output_handler\n\nSCRIPT_NAME = \"Pull Integration\"\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyJob()\n    siemplify.script_name = SCRIPT_NAME\n\n    pull_whitelist = list(\n        [\n            _f\n            for _f in [\n                x.strip()\n                for x in siemplify.extract_job_param(\"Install Whitelist\", \" \").split(\n                    \",\"\n                )\n            ]\n            if _f\n        ]\n    )\n\n    try:\n        gitsync = GitSyncManager.from_siemplify_object(siemplify)\n\n        for integration_name in pull_whitelist:\n            siemplify.LOGGER.info(f\"Pulling Integration: {integration_name}\")\n            integration = gitsync.content.get_integration(integration_name)\n            if integration:\n                siemplify.LOGGER.info(f\"Installing {integration.identifier}\")\n                gitsync.install_integration(integration)\n                siemplify.LOGGER.info(\n                    f\"Successfully installed {integration.identifier}\"\n                )\n            else:\n                siemplify.LOGGER.info(f\"Couldn't find {integration_name} in the repo\")\n\n    except Exception as e:\n        siemplify.LOGGER.error(f\"General error performing Job {SCRIPT_NAME}\")\n        siemplify.LOGGER.exception(e)\n        raise\n\n    siemplify.end_script()\n\n\nif __name__ == \"__main__\":\n    main()\n","Creator":"Admin","RunIntervalInSeconds":900,"Description":"Install an integration or update an installed one.","IsEnabled":true,"IsCustom":true,"Version":1,"IsSystem":false,"Parameters":[{"JobDefinitionId":27,"IsMandatory":true,"DefaultValue":"","Description":"List of integrations, separated by a comma, to pull from the repo","Name":"Install Whitelist","Type":2},{"JobDefinitionId":27,"IsMandatory":false,"DefaultValue":null,"Description":"Optional parameter to override the one found in the integration instance","Name":"Repo URL","Type":2},{"JobDefinitionId":27,"IsMandatory":false,"DefaultValue":null,"Description":"Optional parameter to override the one found in the integration instance","Name":"Branch","Type":2}],"PythonVersion":"None"}