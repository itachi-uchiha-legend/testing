{"Name":"Push Integration GitSyncBeta","Integration":"GitSyncBeta","Script":"from io import BytesIO\n\nfrom GitSyncManager import GitSyncManager\nfrom SiemplifyJob import SiemplifyJob\nfrom SiemplifyUtils import output_handler\nfrom definitions import Integration\n\n\nSCRIPT_NAME = \"Push Integration\"\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyJob()\n    siemplify.script_name = SCRIPT_NAME\n\n    push_allowlist = list(\n        [\n            _f\n            for _f in [\n                x.strip()\n                for x in siemplify.extract_job_param(\"Push Whitelist\", \" \").split(\",\")\n            ]\n            if _f\n        ]\n    )\n    commit_msg = siemplify.extract_job_param(\"Commit\")\n    readme_addon = siemplify.extract_job_param(\"Readme Addon\", input_type=str)\n\n    try:\n        gitsync = GitSyncManager.from_siemplify_object(siemplify)\n\n        integrations = [\n            x for x in gitsync.api.get_ide_cards() if x[\"identifier\"] in push_allowlist\n        ]\n\n        for integration in integrations:\n            siemplify.LOGGER.info(f\"Pushing Integration: {integration['identifier']}\")\n            integration_obj = Integration(\n                integration,\n                BytesIO(gitsync.api.export_package(integration[\"identifier\"])),\n            )\n            if readme_addon:\n                siemplify.LOGGER.info(\n                    \"Readme addon found - adding to GitSync metadata file (GitSync.json)\"\n                )\n                gitsync.content.metadata.set_readme_addon(\n                    \"Integration\", integration.identifier, readme_addon\n                )\n            gitsync.content.push_integration(integration_obj)\n\n        gitsync.commit_and_push(commit_msg)\n\n    except Exception as e:\n        siemplify.LOGGER.error(f\"General error performing Job {SCRIPT_NAME}\")\n        siemplify.LOGGER.exception(e)\n        raise\n\n    siemplify.end_script()\n\n\nif __name__ == \"__main__\":\n    main()\n","Creator":"Admin","RunIntervalInSeconds":900,"Description":"Push an integration to repo. This action will overwrite the entire folder.","IsEnabled":true,"IsCustom":true,"Version":1,"IsSystem":false,"Parameters":[{"JobDefinitionId":34,"IsMandatory":true,"DefaultValue":"","Description":"Commit message","Name":"Commit","Type":2},{"JobDefinitionId":34,"IsMandatory":true,"DefaultValue":"","Description":"List of integrations, separated by a comma, to push to the repo","Name":"Push Whitelist","Type":2},{"JobDefinitionId":34,"IsMandatory":false,"DefaultValue":null,"Description":"Optional parameter to override the one found in the integration instance","Name":"Repo URL","Type":2},{"JobDefinitionId":34,"IsMandatory":false,"DefaultValue":null,"Description":"Optional parameter to override the one found in the integration instance","Name":"Branch","Type":2},{"JobDefinitionId":34,"IsMandatory":false,"DefaultValue":"","Description":"Optional parameter to override the one found in the integration instance","Name":"Commit Author","Type":2},{"JobDefinitionId":34,"IsMandatory":false,"DefaultValue":"","Description":"Appends markdown to the end of the readme file of all integrations pushed this run","Name":"Readme Addon","Type":2}],"PythonVersion":"None"}