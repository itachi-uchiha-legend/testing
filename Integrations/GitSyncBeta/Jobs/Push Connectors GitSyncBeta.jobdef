{"Name":"Push Connectors GitSyncBeta","Integration":"GitSyncBeta","Script":"from GitSyncManager import GitSyncManager\nfrom SiemplifyJob import SiemplifyJob\nfrom SiemplifyUtils import output_handler\nfrom definitions import Connector, Mapping, VisualFamily\n\n\nSCRIPT_NAME = \"Push Connector\"\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyJob()\n    siemplify.script_name = SCRIPT_NAME\n\n    commit_msg = siemplify.extract_job_param(\"Commit\")\n    connector_names = list(\n        [\n            _f\n            for _f in [\n                x.strip()\n                for x in siemplify.extract_job_param(\"Connectors\", \" \").split(\",\")\n            ]\n            if _f\n        ]\n    )\n    include_vf = siemplify.extract_job_param(\"Include Visual Families\", input_type=bool)\n    include_mappings = siemplify.extract_job_param(\"Include Mappings\", input_type=bool)\n    readme_addon = siemplify.extract_job_param(\"Readme Addon\", input_type=str)\n\n    try:\n        gitsync = GitSyncManager.from_siemplify_object(siemplify)\n\n        for connector in gitsync.api.get_connectors():\n            if connector.get(\"displayName\") in connector_names:\n                siemplify.LOGGER.info(f\"Pushing {connector.get('displayName')}\")\n                if readme_addon:\n                    siemplify.LOGGER.info(\n                        \"Readme addon found - adding to GitSync metadata file (GitSync.json)\"\n                    )\n                    gitsync.content.metadata.set_readme_addon(\n                        \"Connector\", connector.get(\"displayName\"), readme_addon\n                    )\n\n                gitsync.content.push_connector(Connector(connector))\n                siemplify.LOGGER.info(\n                    f\"Successfully pushed {connector.get('displayName')}\"\n                )\n\n                if include_mappings or include_vf:\n                    integration_name = connector.get(\"integration\")\n                    records = [\n                        x\n                        for x in gitsync.api.get_ontology_records()\n                        if x.get(\"source\") == integration_name\n                    ]\n                    visual_families = set([x.get(\"familyName\") for x in records])\n                    if include_mappings:\n                        rules = []\n                        for record in records:\n                            record[\"exampleEventFields\"] = []  # remove event assets\n                            rule = gitsync.api.get_mapping_rules(\n                                record[\"source\"], record[\"product\"], record[\"eventName\"]\n                            )\n                            for r in rule[\"familyFields\"] + rule[\"systemFields\"]:\n                                # remove bad rules with no source\n                                if (\n                                    r[\"mappingRule\"][\"source\"]\n                                    and r[\"mappingRule\"][\"source\"].lower()\n                                    == integration_name.lower()\n                                ):\n                                    rules.append(rule)\n                                    break\n                        if not records and not rules:\n                            siemplify.LOGGER.info(\n                                f\"{integration_name} mappings don't exist. Skipping\"\n                            )\n                        else:\n                            siemplify.LOGGER.info(\n                                f\"Pushing {integration_name} mappings\"\n                            )\n                            gitsync.content.push_mapping(\n                                Mapping(integration_name, records, rules)\n                            )\n\n                    if include_vf:\n                        for visualFamily in gitsync.api.get_custom_families():\n                            if visualFamily[\"family\"] in visual_families:\n                                siemplify.LOGGER.info(\n                                    f\"Pushing Visual Family - {visualFamily['family']}\"\n                                )\n                                gitsync.content.push_visual_family(\n                                    VisualFamily(\n                                        gitsync.api.get_custom_family(\n                                            visualFamily[\"id\"]\n                                        )\n                                    )\n                                )\n\n        gitsync.commit_and_push(commit_msg)\n\n    except Exception as e:\n        siemplify.LOGGER.error(f\"General error performing Job {SCRIPT_NAME}\")\n        siemplify.LOGGER.exception(e)\n        raise\n\n\nif __name__ == \"__main__\":\n    main()\n","Creator":"Admin","RunIntervalInSeconds":900,"Description":"Exports a connector to the repo.","IsEnabled":true,"IsCustom":true,"Version":1,"IsSystem":false,"Parameters":[{"JobDefinitionId":104,"IsMandatory":true,"DefaultValue":"","Description":"Commit message","Name":"Commit","Type":2},{"JobDefinitionId":104,"IsMandatory":true,"DefaultValue":"","Description":"List of connectors, separated by a comma, to push to the repo","Name":"Connectors","Type":2},{"JobDefinitionId":104,"IsMandatory":false,"DefaultValue":"","Description":"Optional parameter to override the one found in the integration instance","Name":"Branch","Type":2},{"JobDefinitionId":104,"IsMandatory":false,"DefaultValue":"","Description":"Optional parameter to override the one found in the integration instance","Name":"Repo URL","Type":2},{"JobDefinitionId":104,"IsMandatory":false,"DefaultValue":"","Description":"Optional parameter to override the one found in the integration instance","Name":"Commit Author","Type":2},{"JobDefinitionId":104,"IsMandatory":false,"DefaultValue":"false","Description":"Whether to include related visual families that the connector alerts use","Name":"Include Visual Families","Type":0},{"JobDefinitionId":104,"IsMandatory":false,"DefaultValue":"false","Description":"Whether to include related mappings that the connector alerts use","Name":"Include Mappings","Type":0},{"JobDefinitionId":104,"IsMandatory":false,"DefaultValue":"","Description":"Appends markdown to the end of the readme file of all connectors pushed this run","Name":"Readme Addon","Type":2}],"PythonVersion":"None"}