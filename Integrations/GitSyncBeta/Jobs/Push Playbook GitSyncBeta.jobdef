{"Name":"Push Playbook GitSyncBeta","Integration":"GitSyncBeta","Script":"from jinja2 import Template\n\nfrom GitSyncManager import GitSyncManager\nfrom SiemplifyJob import SiemplifyJob\nfrom SiemplifyUtils import output_handler\nfrom constants import PLAYBOOKS_ROOT_README\nfrom definitions import Workflow\n\n\nSCRIPT_NAME = \"Push Playbook\"\n\n\ndef create_root_readme(gitsync: GitSyncManager):\n    playbooks = []\n    for pb in gitsync.content.get_playbooks():\n        playbooks.append(pb.raw_data)\n    readme = Template(PLAYBOOKS_ROOT_README)\n    return readme.render(playbooks=playbooks)\n\n\ndef extract_list_parameter(siemplify: SiemplifyJob, param_name: str):\n    return list(\n        [\n            _f\n            for _f in [\n                x.strip()\n                for x in siemplify.extract_job_param(param_name, \" \").split(\",\")\n            ]\n            if _f\n        ]\n    )\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyJob()\n    siemplify.script_name = SCRIPT_NAME\n    playbooks_allowlist = extract_list_parameter(siemplify, \"Playbook Whitelist\")\n    folders_allowlist = extract_list_parameter(siemplify, \"Folders Whitelist\")\n    commit_msg = siemplify.extract_job_param(\"Commit\")\n    readme_addon = siemplify.extract_job_param(\"Readme Addon\", input_type=str)\n    include_blocks = siemplify.extract_job_param(\n        \"Include Playbook Blocks\", input_type=bool\n    )\n\n    if not playbooks_allowlist and not folders_allowlist:\n        raise Exception(\"Playbook or Folder allowlist not provided\")\n\n    try:\n        gitsync = GitSyncManager.from_siemplify_object(siemplify)\n        installed_playbooks = gitsync.api.get_playbooks()\n\n        for playbook in installed_playbooks:\n            if (\n                playbook.get(\"name\") in playbooks_allowlist\n                or playbook.get(\"categoryName\") in folders_allowlist\n            ):\n                siemplify.LOGGER.info(f\"Pushing Playbook {playbook['name']}\")\n\n                if readme_addon:\n                    siemplify.LOGGER.info(\n                        \"Readme addon found - adding to GitSync metadata file (GitSync.json)\"\n                    )\n                    gitsync.content.metadata.set_readme_addon(\n                        \"Playbook\", playbook.get(\"name\"), readme_addon\n                    )\n\n                playbook = Workflow(\n                    gitsync.api.get_playbook(playbook.get(\"identifier\"))\n                )\n                gitsync.content.push_playbook(playbook)\n                if include_blocks:\n                    for block in playbook.get_involved_blocks():\n                        installed_block = next(\n                            (\n                                x\n                                for x in installed_playbooks\n                                if x.get(\"name\") == block.get(\"name\")\n                            ),\n                            None,\n                        )\n                        if not installed_block:\n                            siemplify.LOGGER.warn(\n                                f\"Block {block.get('name')} wasn't found in the repo, ignoring\"\n                            )\n                            continue\n                        block = Workflow(\n                            gitsync.api.get_playbook(installed_block.get(\"identifier\"))\n                        )\n                        gitsync.content.push_playbook(block)\n            else:\n                siemplify.LOGGER.warn(\n                    f\"Playbook {playbook.get('name')} not found, Skipping\"\n                )\n\n        gitsync.update_readme(create_root_readme(gitsync), \"Playbooks\")\n        gitsync.commit_and_push(commit_msg)\n\n    except Exception as e:\n        siemplify.LOGGER.error(f\"General error performing Job {SCRIPT_NAME}\")\n        siemplify.LOGGER.exception(e)\n        raise\n\n    siemplify.end_script()\n\n\nif __name__ == \"__main__\":\n    main()\n","Creator":"Admin","RunIntervalInSeconds":900,"Description":"Exports playbooks or blocks to the repo","IsEnabled":true,"IsCustom":true,"Version":1,"IsSystem":false,"Parameters":[{"JobDefinitionId":33,"IsMandatory":false,"DefaultValue":null,"Description":"Optional parameter to override the one found in the integration instance","Name":"Branch","Type":2},{"JobDefinitionId":33,"IsMandatory":true,"DefaultValue":"","Description":"Commit message","Name":"Commit","Type":2},{"JobDefinitionId":33,"IsMandatory":false,"DefaultValue":null,"Description":"Optional parameter to override the one found in the integration instance","Name":"Repo URL","Type":2},{"JobDefinitionId":33,"IsMandatory":false,"DefaultValue":"","Description":"Optional parameter to override the one found in the integration instance","Name":"Commit Author","Type":2},{"JobDefinitionId":33,"IsMandatory":false,"DefaultValue":"","Description":null,"Name":"Folders Whitelist","Type":2},{"JobDefinitionId":33,"IsMandatory":false,"DefaultValue":"","Description":null,"Name":"Playbook Whitelist","Type":2},{"JobDefinitionId":33,"IsMandatory":false,"DefaultValue":"","Description":"Appends markdown to the end of the readme file of all playbooks pushed this run","Name":"Readme Addon","Type":2},{"JobDefinitionId":33,"IsMandatory":false,"DefaultValue":"true","Description":"Push playbooks involved blocks. To force a link between playbooks and blocks, Set this flag to True and specify only the playbook name in the list","Name":"Include Playbook Blocks","Type":0}],"PythonVersion":"None"}