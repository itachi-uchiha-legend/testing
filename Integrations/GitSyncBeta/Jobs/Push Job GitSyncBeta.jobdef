{"Name":"Push Job GitSyncBeta","Integration":"GitSyncBeta","Script":"from GitSyncManager import GitSyncManager\nfrom SiemplifyJob import SiemplifyJob\nfrom SiemplifyUtils import output_handler\nfrom constants import IGNORED_JOBS, INTEGRATION_NAME\nfrom definitions import Job\n\nSCRIPT_NAME = \"Push Job\"\n\n\ndef create_root_readme(gitsync: GitSyncManager):\n    jobs = []\n    for job in gitsync.content.get_jobs():\n        job.generate_readme(gitsync.content.metadata.get_readme_addon(\"Job\", job.name))\n        jobs.append(job)\n\n    readme = \"\".join([x.readme for x in jobs])\n    gitsync.update_readme(readme, \"Jobs\")\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyJob()\n    siemplify.script_name = SCRIPT_NAME\n\n    commit_msg = siemplify.extract_job_param(\"Commit\")\n    jobs = list(\n        [\n            _f\n            for _f in [\n                x.strip()\n                for x in siemplify.extract_job_param(\"Job Whitelist\", \" \").split(\",\")\n            ]\n            if _f\n        ]\n    )\n    readme_addon = siemplify.extract_job_param(\"Readme Addon\", input_type=str)\n\n    try:\n        gitsync = GitSyncManager.from_siemplify_object(siemplify)\n\n        for job in gitsync.api.get_jobs():\n            if (\n                job.get(\"name\") in jobs\n                and not job.get(\"name\") in IGNORED_JOBS\n                and job.get(\"integration\") != INTEGRATION_NAME\n            ):\n                siemplify.LOGGER.info(f\"Pushing {job['name']}\")\n                job = Job(job)\n                if readme_addon:\n                    siemplify.LOGGER.info(\n                        \"Readme addon found - adding to GitSync metadata file (GitSync.json)\"\n                    )\n                    gitsync.content.metadata.set_readme_addon(\n                        \"Job\", job.name, readme_addon\n                    )\n                gitsync.content.push_job(job)\n\n        create_root_readme(gitsync)\n\n        gitsync.commit_and_push(commit_msg)\n\n    except Exception as e:\n        siemplify.LOGGER.error(f\"General error performing Job {SCRIPT_NAME}\")\n        siemplify.LOGGER.exception(e)\n        raise\n\n\nif __name__ == \"__main__\":\n    main()\n","Creator":"Admin","RunIntervalInSeconds":900,"Description":"Export a job to the repo","IsEnabled":true,"IsCustom":true,"Version":1,"IsSystem":false,"Parameters":[{"JobDefinitionId":30,"IsMandatory":true,"DefaultValue":"","Description":"Commit message","Name":"Commit","Type":2},{"JobDefinitionId":30,"IsMandatory":false,"DefaultValue":null,"Description":"Optional parameter to override the one found in the integration instance","Name":"Repo URL","Type":2},{"JobDefinitionId":30,"IsMandatory":false,"DefaultValue":null,"Description":"Optional parameter to override the one found in the integration instance","Name":"Branch","Type":2},{"JobDefinitionId":30,"IsMandatory":false,"DefaultValue":"","Description":"Optional parameter to override the one found in the integration instance","Name":"Commit Author","Type":2},{"JobDefinitionId":30,"IsMandatory":true,"DefaultValue":"","Description":"List of jobs, separated by a comma, to push to the repo","Name":"Job Whitelist","Type":2},{"JobDefinitionId":30,"IsMandatory":false,"DefaultValue":"","Description":"Appends markdown to the end of the readme file of all jobs pushed this run","Name":"Readme Addon","Type":2}],"PythonVersion":"None"}