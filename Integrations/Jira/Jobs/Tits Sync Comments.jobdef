{
    "id": 0,
    "type": 2,
    "name": "Tits Sync Comments",
    "description": "Sync comments between Siemplify alert\u2019s case and corresponding Jira ticket. Sync mechanism works in both ways, Siemplify \u2192 Jira and Jira \u2192 Siemplify",
    "script": "from datetime import timezone\n\nfrom SiemplifyJob import SiemplifyJob\nfrom SiemplifyUtils import (\n    convert_unixtime_to_datetime,\n    unix_now,\n    output_handler,\n    convert_datetime_to_unix_time,\n)\nfrom TIPCommon import get_last_success_time\n\nfrom JiraConstants import (\n    SYNC_COMMENTS_SCRIPT,\n    DEFAULT_DAYS_BACKWARDS,\n    DEFAULT_SIEMPLIFY_COMMENT_PREFIX,\n    DEFAULT_JIRA_COMMENT_PREFIX,\n    JIRA_TAG,\n    CASE_STATUS_OPEN,\n    MIN_DAYS_BACKWARDS,\n    PRODUCT,\n    JIRA_TIME_FORMAT,\n    JIRA_ISSUE_KEY,\n    JIRA_PROJECT_KEY,\n)\nfrom JiraManager import JiraManager\nfrom exceptions import JiraManagerError\nfrom utils import load_csv_to_list\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyJob()\n    siemplify.API_ROOT = \"https://him:8443/api\"\n    siemplify.script_name = SYNC_COMMENTS_SCRIPT\n    siemplify.LOGGER.info(\"--------------- JOB STARTED ---------------\")\n\n    api_root = siemplify.extract_job_param(\n        param_name=\"API Root\", is_mandatory=True, print_value=True\n    )\n    username = siemplify.extract_job_param(\n        param_name=\"Username\", is_mandatory=True, print_value=True\n    )\n    api_token = siemplify.extract_job_param(\n        param_name=\"API Token\", is_mandatory=True, print_value=False\n    )\n    project_names = siemplify.extract_job_param(\n        param_name=\"Project Names\", is_mandatory=False, print_value=True\n    )\n    environment_ = siemplify.extract_job_param(\n        param_name=\"Environment\",\n        print_value=True,\n    )\n    environments = [environment_] if environment_ else []\n\n    try:\n        days_backwards = siemplify.extract_job_param(\n            param_name=\"Days Backwards\",\n            input_type=int,\n            default_value=DEFAULT_DAYS_BACKWARDS,\n            is_mandatory=False,\n            print_value=True,\n        )\n        siemplify_comment_prefix = siemplify.extract_job_param(\n            param_name=\"Siemplify Comment Prefix\",\n            is_mandatory=True,\n            print_value=True,\n            default_value=DEFAULT_SIEMPLIFY_COMMENT_PREFIX,\n        )\n        jira_comment_prefix = siemplify.extract_job_param(\n            param_name=\"Jira Comment Prefix\",\n            is_mandatory=True,\n            default_value=DEFAULT_JIRA_COMMENT_PREFIX,\n            print_value=True,\n        )\n        project_names = load_csv_to_list(project_names, \"Project Names\")\n        fetch_time = get_last_success_time(\n            siemplify, offset_with_metric={\"days\": days_backwards}, print_value=False\n        )\n        fetch_time_ms = convert_datetime_to_unix_time(fetch_time)\n        siemplify.LOGGER.info(\n            f\"Last fetch time. Date time:{fetch_time}. Unix:{fetch_time_ms}\"\n        )\n        new_timestamp = unix_now()\n\n        if days_backwards < MIN_DAYS_BACKWARDS:\n            raise Exception(\n                f'\"Days Backwards\" parameter must be greater or equal than {MIN_DAYS_BACKWARDS}'\n            )\n\n        jira_manager = JiraManager(\n            api_root, username, api_token, logger=siemplify.LOGGER\n        )\n\n        siemplify.LOGGER.info(\n            \"--- Start synchronizing Issues Comments from Siemplify to Jira ---\"\n        )\n\n        fetched_open_cases_ids = siemplify.get_cases_by_filter(\n            environments=environments, statuses=[CASE_STATUS_OPEN], tags=[JIRA_TAG]\n        )\n        siemplify.LOGGER.info(\n            f\"Found {len(fetched_open_cases_ids)} open cases with tag {JIRA_TAG}\"\n        )\n        case_details = {}\n        for case_id in fetched_open_cases_ids:\n            case = siemplify._get_case_by_id(case_id)\n            case_details[case_id] = case\n            case_identifier = case.get(\"identifier\")\n            case_comments = siemplify.get_case_comments(case_identifier)\n\n            for comment in case_comments:\n                comment_time = convert_unixtime_to_datetime(\n                    comment.get(\"modification_time_unix_time_in_ms\")\n                )\n\n                # Filter already created comments and comments that already were processed by the job\n                if comment_time < fetch_time or comment.get(\n                    \"comment\", jira_comment_prefix\n                ).startswith(jira_comment_prefix):\n                    continue\n\n                # Update all cases related to issue of Jira\n                for alert in case.get(\"cyber_alerts\", []):\n                    issue_key = (\n                        alert.get(\"additional_data\")\n                        if alert.get(\"reporting_product\") != PRODUCT\n                        else alert.get(\"additional_properties\", {}).get(\"AlertName\")\n                    )\n                    if not issue_key:\n                        issue_key = siemplify.get_context_property(\n                            2,\n                            alert.get('alert_group_identifier'),\n                            JIRA_ISSUE_KEY,\n                        )\n                    issue_project = (\n                        alert.get(\"security_events\", [])[0]\n                        .get(\"additional_properties\", {})\n                        .get(\"project_name\")\n                    )\n                    if not issue_project:\n                        issue_project = siemplify.get_context_property(\n                            2,\n                            alert.get('alert_group_identifier'),\n                            JIRA_PROJECT_KEY,\n                        )\n\n                    if issue_project not in project_names:\n                        siemplify.LOGGER.info(\n                            f\"Alert with issue key {issue_key} of project {issue_project} is not in projects:\"\n                            f\" {', '.join(project_names)}\"\n                        )\n                        continue\n\n                    if issue_key:\n                        # Add the comment to Jira ticket\n                        try:\n                            comment_text = (\n                                f\"{siemplify_comment_prefix} {comment.get('comment')}\"\n                            )\n                            siemplify.LOGGER.info(\n                                f\"Adding jira comment with id {comment.get('id')} to issue {issue_key}\"\n                            )\n                            jira_manager.add_comment(issue_key, comment_text)\n                            siemplify.LOGGER.info(\n                                f\"Successfully added comment to issue {issue_key}\"\n                            )\n                        except Exception as error:\n                            siemplify.LOGGER.error(\n                                f\"Failed to add comment to issue {issue_key}, error: {error}\"\n                            )\n                            siemplify.LOGGER.exception(error)\n                    else:\n                        siemplify.LOGGER.info(\n                            f\"Cannot find issue key. Comments from case {case_identifier} not added to issue\"\n                        )\n\n        siemplify.LOGGER.info(\n            \" --- Finish synchronize comments from Siemplify cases to Jira issues --- \"\n        )\n        siemplify.LOGGER.info(\n            \"--- Start synchronize Issues Comments from Jira to Siemplify ---\"\n        )\n\n        # Adjust fetch time to JIRA server's timezone\n        jira_server_time = jira_manager.get_server_time()\n        siemplify.LOGGER.info(f\"JIRA server time: {jira_server_time.isoformat()}\")\n        fetch_time_jira_timezone_adjusted = fetch_time.replace(\n            tzinfo=timezone.utc\n        ).astimezone(jira_server_time.tzinfo)\n        siemplify.LOGGER.info(\n            f\"Adjusted last fetch time to server time: {fetch_time_jira_timezone_adjusted.isoformat()}\"\n        )\n\n        jira_last_time_format = fetch_time_jira_timezone_adjusted.strftime(\n            JIRA_TIME_FORMAT\n        )\n        # Fetch modified issues since last fetch time\n        last_modified_issues = jira_manager.list_issues(\n            updated_from=jira_last_time_format, project_key_list=project_names\n        )\n        siemplify.LOGGER.info(\n            f\"Found {len(last_modified_issues)} issues that modified since \"\n            f\"{fetch_time_jira_timezone_adjusted.isoformat()} (Server Timezone)\"\n        )\n\n        for issue_key in last_modified_issues:\n            comments_to_add = jira_manager.get_issue_comments_since_time(\n                issue_key, fetch_time_ms\n            )\n            siemplify.LOGGER.info(\n                f\"{issue_key} has {len(comments_to_add)} comments since {fetch_time.isoformat()}\"\n            )\n\n            # Filter jira issue comments that were added by siemplify\n            comments_to_add = [\n                comment\n                for comment in comments_to_add\n                if comment.body and siemplify_comment_prefix not in comment.body\n            ]\n\n            if not comments_to_add:\n                siemplify.LOGGER.info(f\"No new comments found in issue: {issue_key}\")\n                continue\n\n            siemplify.LOGGER.info(\n                f\"Found {len(comments_to_add)} new comments of issue {issue_key} to add to siemplify\"\n            )\n\n            try:\n                # Find corresponding Siemplify cases to add comment\n                cases_ids_for_issue = siemplify.get_cases_by_filter(\n                    environments=environments,\n                    ticked_ids_free_search=issue_key,\n                    tags=[JIRA_TAG],\n                    statuses=[CASE_STATUS_OPEN],\n                )\n                if not cases_ids_for_issue:\n                    cases_ids_for_issue = []\n\n                    for case_id, case_obj in case_details.items():\n                        for alert in case_obj.get(\"cyber_alerts\", []):\n                            case_id_from_context = siemplify.get_context_property(\n                                2,\n                                alert.get(\"alert_group_identifier\"),\n                                JIRA_ISSUE_KEY,\n                            )\n\n                            if case_id_from_context == issue_key:\n                                cases_ids_for_issue.append(case_id)\n\n                if not cases_ids_for_issue:\n                    siemplify.LOGGER.info(\n                        f\"No open siemplify cases were found for issue key {issue_key} and tag {JIRA_TAG}\"\n                    )\n                    continue\n\n                for case_id in cases_ids_for_issue:\n                    if comments_to_add:\n                        for comment in comments_to_add:\n                            try:\n                                siemplify.LOGGER.info(\n                                    f\"Adding jira comment with id {comment.id} to case with id {case_id}\"\n                                )\n                                comment_text = f\"{jira_comment_prefix} {comment.body}\"\n                                siemplify.add_comment(comment_text, case_id, None)\n                                siemplify.LOGGER.info(\n                                    f\"Successfully added comment to case\"\n                                )\n                            except Exception as error:\n                                siemplify.LOGGER.error(\n                                    f\"Failed to add jira comment with id {comment.id} to case with id {case_id}\"\n                                )\n                                siemplify.LOGGER.exception(error)\n\n            except Exception as error:\n                siemplify.LOGGER.error(\n                    f\"Failed to sync jira issue key {issue_key} comments with corresponding siemplify case\"\n                )\n                siemplify.LOGGER.exception(error)\n\n        siemplify.save_timestamp(new_timestamp=new_timestamp)\n        siemplify.LOGGER.info(\n            \" --- Finish synchronize comments from Jira issues to cases --- \"\n        )\n        siemplify.LOGGER.info(\"--------------- JOB FINISHED ---------------\")\n\n    except (JiraManagerError, Exception) as error:\n        siemplify.LOGGER.error(f\"Got exception on main handler. Error: {error}\")\n        siemplify.LOGGER.exception(error)\n        raise\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "integration": "Jira",
    "creator": "Siemplify automation",
    "creatorFullName": "Siemplify automation",
    "isEnabled": true,
    "isCustom": true,
    "version": 9,
    "parameters": [
        {
            "isMandatory": true,
            "isAdvanced": false,
            "name": "API Root",
            "defaultValue": "https://{jira_address}",
            "type": 2,
            "description": null,
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": true,
            "isAdvanced": false,
            "name": "Username",
            "defaultValue": "",
            "type": 2,
            "description": null,
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": true,
            "isAdvanced": false,
            "name": "API Token",
            "defaultValue": "",
            "type": 3,
            "description": null,
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": false,
            "isAdvanced": false,
            "name": "Environment",
            "defaultValue": "",
            "type": 2,
            "description": null,
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": false,
            "isAdvanced": false,
            "name": "Project Names",
            "defaultValue": "project names separated by comma",
            "type": 2,
            "description": null,
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": false,
            "isAdvanced": false,
            "name": "Days Backwards",
            "defaultValue": "1",
            "type": 2,
            "description": null,
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": true,
            "isAdvanced": false,
            "name": "Siemplify Comment Prefix",
            "defaultValue": "SIEMPLIFY:",
            "type": 2,
            "description": null,
            "mode": 1,
            "optionalValues": null
        },
        {
            "isMandatory": true,
            "isAdvanced": false,
            "name": "Jira Comment Prefix",
            "defaultValue": "Jira Comment Sync Job:",
            "type": 2,
            "description": null,
            "mode": 1,
            "optionalValues": null
        }
    ],
    "connectorRules": null,
    "isConnectorRulesSupported": false,
    "documentationLink": null,
    "pythonVersion": "V3_11"
}