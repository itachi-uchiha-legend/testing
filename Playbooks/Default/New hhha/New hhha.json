{
    "id": 0,
    "identifier": "e06008a8-6c13-493e-8550-937ac6a2a400",
    "version": "0",
    "isEnabled": true,
    "isDebugMode": false,
    "name": "New hhha",
    "creator": "e1788b75-7ef3-4894-9c97-0c03e85a9a55",
    "modifiedBy": "973d7959-bcd7-48fa-8b56-37fa8244951d",
    "priority": 2,
    "description": "",
    "environments": [
        "Default Environment"
    ],
    "categoryName": "Default",
    "categoryId": 1,
    "originalPlaybookIdentifier": "e06008a8-6c13-493e-8550-937ac6a2a400",
    "creationTimeUnixTimeInMs": 1751246678688,
    "modificationTimeUnixTimeInMs": 1751246678688,
    "trigger": {
        "id": 0,
        "identifier": "5752290c-0097-49ac-9cae-8c09d66896b8",
        "type": 8,
        "logicalOperator": 0,
        "conditions": [
            {
                "fieldName": "",
                "value": "",
                "matchType": 0
            }
        ]
    },
    "steps": [
        {
            "parallelActions": [],
            "identifier": "251920c3-fa6f-405f-9f8c-6b4b09c46ed6",
            "originalStepIdentifier": "7a29f902-5bf7-44f8-9cca-501a1da72a9b",
            "isAutomatic": true,
            "isSkippable": false,
            "instanceName": "Siemplify_Get Similar Cases_1",
            "name": "Siemplify_Get Similar Cases",
            "integration": "Siemplify",
            "description": "Search for similar cases and return their Ids",
            "actionProvider": "Scripts",
            "actionName": "Siemplify_Get Similar Cases",
            "type": 0,
            "parameters": [
                {
                    "name": "AssignedUsers",
                    "value": null,
                    "type": null,
                    "isMandatory": false,
                    "defaultValue": null,
                    "id": 0,
                    "creationTimeUnixTimeInMs": 0,
                    "modificationTimeUnixTimeInMs": 0,
                    "additionalProperties": {}
                },
                {
                    "name": "DynamicInjectionInstancePlaceholder",
                    "value": "",
                    "type": null,
                    "isMandatory": false,
                    "defaultValue": null,
                    "id": 0,
                    "creationTimeUnixTimeInMs": 0,
                    "modificationTimeUnixTimeInMs": 0,
                    "additionalProperties": {}
                },
                {
                    "name": "FallbackIntegrationInstance",
                    "value": null,
                    "type": null,
                    "isMandatory": false,
                    "defaultValue": null,
                    "id": 0,
                    "creationTimeUnixTimeInMs": 0,
                    "modificationTimeUnixTimeInMs": 0,
                    "additionalProperties": {}
                },
                {
                    "name": "FetchInstanceByName",
                    "value": "false",
                    "type": null,
                    "isMandatory": false,
                    "defaultValue": null,
                    "id": 0,
                    "creationTimeUnixTimeInMs": 0,
                    "modificationTimeUnixTimeInMs": 0,
                    "additionalProperties": {}
                },
                {
                    "name": "HasApprovalLink",
                    "value": null,
                    "type": null,
                    "isMandatory": false,
                    "defaultValue": null,
                    "id": 0,
                    "creationTimeUnixTimeInMs": 0,
                    "modificationTimeUnixTimeInMs": 0,
                    "additionalProperties": {}
                },
                {
                    "name": "IntegrationInstance",
                    "value": "9eab07c3-a6e0-410d-abf0-226fdb2deee1",
                    "type": null,
                    "isMandatory": false,
                    "defaultValue": null,
                    "id": 0,
                    "creationTimeUnixTimeInMs": 0,
                    "modificationTimeUnixTimeInMs": 0,
                    "additionalProperties": {},
                    "InstanceDisplayName": "System Default Instance"
                },
                {
                    "name": "MessageToAssignee",
                    "value": null,
                    "type": null,
                    "isMandatory": false,
                    "defaultValue": null,
                    "id": 0,
                    "creationTimeUnixTimeInMs": 0,
                    "modificationTimeUnixTimeInMs": 0,
                    "additionalProperties": {}
                },
                {
                    "name": "PendingActionTimeout",
                    "value": null,
                    "type": null,
                    "isMandatory": false,
                    "defaultValue": null,
                    "id": 0,
                    "creationTimeUnixTimeInMs": 0,
                    "modificationTimeUnixTimeInMs": 0,
                    "additionalProperties": {}
                },
                {
                    "name": "ScriptName",
                    "value": "Siemplify_Get Similar Cases",
                    "type": null,
                    "isMandatory": false,
                    "defaultValue": null,
                    "id": 0,
                    "creationTimeUnixTimeInMs": 0,
                    "modificationTimeUnixTimeInMs": 0,
                    "additionalProperties": {}
                },
                {
                    "name": "ScriptParametersEntityFields",
                    "value": "{\"Rule Generator\":true,\"Port\":true,\"Category Outcome\":true,\"Entity Identifier\":true,\"Days Back\":\"1\",\"Include Open Cases\":true,\"Include Closed Cases\":true}",
                    "type": null,
                    "isMandatory": false,
                    "defaultValue": null,
                    "id": 0,
                    "creationTimeUnixTimeInMs": 0,
                    "modificationTimeUnixTimeInMs": 0,
                    "additionalProperties": {}
                },
                {
                    "name": "SelectedScopeName",
                    "value": "All entities",
                    "type": null,
                    "isMandatory": false,
                    "defaultValue": null,
                    "id": 0,
                    "creationTimeUnixTimeInMs": 0,
                    "modificationTimeUnixTimeInMs": 0,
                    "additionalProperties": {}
                },
                {
                    "name": "UseEntitiesLoopScope",
                    "value": null,
                    "type": null,
                    "isMandatory": false,
                    "defaultValue": null,
                    "id": 0,
                    "creationTimeUnixTimeInMs": 0,
                    "modificationTimeUnixTimeInMs": 0,
                    "additionalProperties": {}
                }
            ],
            "autoSkipOnFailure": false,
            "isDebugMockData": false,
            "debugData": null,
            "parentStepContainerId": null,
            "workflowIdentifier": "e06008a8-6c13-493e-8550-937ac6a2a400",
            "isTouchedByAi": false,
            "startLoopStepIdentifier": null,
            "id": 0,
            "creationTimeUnixTimeInMs": 1751246678688,
            "modificationTimeUnixTimeInMs": 1751246678688,
            "additionalProperties": {}
        }
    ],
    "stepsRelations": [],
    "templateName": null,
    "playbookType": 0,
    "debugData": {
        "debugBaseAlertId": null,
        "debugAlertId": null
    },
    "entityAccessLevel": 2,
    "defaultAccessLevel": 2,
    "permissions": [],
    "overviewTemplates": [
        {
            "id": 6,
            "identifier": "e07f1a83-8773-4b68-8086-a37eb499a22d",
            "name": "has",
            "creator": null,
            "playbookIdentifier": "e06008a8-6c13-493e-8550-937ac6a2a400",
            "type": 0,
            "widgets": [
                {
                    "metadata": {
                        "id": 22,
                        "identifier": "6369bd37-188b-4530-845b-57237b3047d5",
                        "title": "HTML",
                        "width": 2,
                        "order": 1,
                        "description": "",
                        "type": 3,
                        "templateIdentifier": "e07f1a83-8773-4b68-8086-a37eb499a22d",
                        "predefinedWidgetTemplateIdentifier": null,
                        "actionIdentifier": null,
                        "stepIdentifier": null,
                        "stepIntegration": null,
                        "blockStepIdentifier": null,
                        "blockStepInstanceName": null,
                        "presentIfEmpty": false,
                        "conditionsGroup": {
                            "conditions": [],
                            "logicalOperator": 0
                        },
                        "integrationName": "",
                        "isSupported": null
                    },
                    "config": {
                        "htmlContent": null,
                        "htmlHeight": 200,
                        "safeRendering": false,
                        "type": 3,
                        "widgetDefinitionScope": 2
                    }
                },
                {
                    "metadata": {
                        "id": 23,
                        "identifier": "eb9e70c5-7429-46cf-9482-0186e25b99a0",
                        "title": "Siemplify_Get Similar Cases_1",
                        "width": 1,
                        "order": 2,
                        "description": "This widget highlights the most important items in Siemplify - Get Similar Cases.",
                        "type": 3,
                        "templateIdentifier": "e07f1a83-8773-4b68-8086-a37eb499a22d",
                        "predefinedWidgetTemplateIdentifier": "37d5d512-6e08-4a2a-9c95-1c99f9192321",
                        "actionIdentifier": null,
                        "stepIdentifier": "251920c3-fa6f-405f-9f8c-6b4b09c46ed6",
                        "stepIntegration": null,
                        "blockStepIdentifier": null,
                        "blockStepInstanceName": null,
                        "presentIfEmpty": false,
                        "conditionsGroup": {
                            "conditions": [
                                {
                                    "fieldName": "[{stepInstanceName}.JsonResult]",
                                    "matchType": 1,
                                    "value": "}"
                                }
                            ],
                            "logicalOperator": 0
                        },
                        "integrationName": "Siemplify",
                        "isSupported": null
                    },
                    "config": {
                        "htmlContent": "<!-- Custom Widget / Integration Version when it was updated 82.0 -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\"/>\n  <meta content=\"width=device-width, initial-scale=1.0\" name=\"viewport\"/>\n  <link href=\"https://fonts.googleapis.com/css?family=Open+Sans:400,400i,700,700i\"\n        rel=\"stylesheet\"/>\n  <link href=\"https://fonts.googleapis.com/css?family=Source Sans Pro\"\n        rel=\"stylesheet\"/>\n  <title>Get Similar Cases</title>\n  <style>\n    /* Root Variables */\n    :root {\n      --widget-bg: rgb(33, 44, 68);\n      --widget-font-family: 'Source Sans Pro', sans-serif;\n      --widget-text-color: rgb(255, 255, 255);\n      --widget-scrollbar-size: 12px;\n      --widget-row-highlight-bg: rgb(47 61 91);\n\n      /*Logo styles*/\n      --logo-size: 48px;\n      --logo-color: rgb(255, 255, 255);\n      /*Logo styles*/\n\n      --list-item-key-font: 600 14px/18px var(--widget-font-family);\n      --list-item-value-font: 400 14px/18px var(--widget-font-family);\n\n      /*Table styles*/\n      --table-color-even-row: rgb(26 32 50);\n      --table-title-size: 600 14px/18px var(--widget-font-family);\n      --table-th-size: 600 14px/18px var(--widget-font-family);\n      --table-td-size: 400 14px/17px var(--widget-font-family);\n    }\n\n    /*Normalize CSS */\n    * {\n      margin: 0;\n      padding: 0;\n      outline: none;\n      box-sizing: border-box;\n    }\n\n    *:hover, *:focus, *:active {\n      outline: none;\n    }\n\n    table {\n      width: 100%;\n      border-collapse: collapse;\n      border-spacing: 0;\n      table-layout: fixed;\n    }\n\n    ol, ul {\n      list-style: none;\n    }\n\n    button,\n    input,\n    textarea {\n      font-family: inherit;\n      background: transparent;\n      border: 0;\n      color: inherit;\n      text-align: left;\n    }\n\n    button, a[href] {\n      cursor: pointer;\n    }\n\n    /*Normalize CSS */\n\n\n    /* Custom Scrollbar */\n    ::-webkit-scrollbar {\n      width: 18px;\n      height: 18px;\n    }\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(137, 151, 180, 1);\n      border: 6px solid var(--widget-bg);\n      border-radius: 63px;\n    }\n\n    ::-webkit-scrollbar-track {\n      background: transparent;\n      border: 4px solid transparent;\n      border-radius: 44px;\n    }\n\n    ::-webkit-scrollbar-corner {\n      background-color: transparent;\n      border-color: transparent;\n    }\n\n    body {\n      font-family: var(--widget-font-family), serif;\n      color: var(--widget-text-color);\n      background-color: var(--widget-bg);\n      overflow: hidden;\n    }\n\n    /*Global styles*/\n    .link {\n      color: #669DF6;\n      text-decoration-line: underline;\n      display: inline-flex;\n      align-items: center;\n      gap: 4px\n    }\n\n    .text-ellipsis {\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n\n    .tooltip {\n      max-width: 100%;\n      position: absolute;\n      padding: 8px 16px 8px 16px;\n      border-radius: 4px;\n      background-color: rgb(204 204 218);\n      color: rgb(22, 22, 37);\n      font: 400 14px/18px var(--widget-font-family);\n      z-index: 9;\n      word-wrap: break-word;\n    }\n\n    .tooltip-triangle {\n      position: absolute;\n      top: 100%;\n      border-top: solid 8px rgb(195, 210, 232);\n      border-left: solid 8px transparent;\n      border-right: solid 8px transparent;\n    }\n\n    /*Global styles*/\n\n    .wrapper {\n      height: 100vh;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .list {\n      display: grid;\n      grid-template-columns: repeat(5, auto);\n      padding: 12px 6px;\n      gap: 6px;\n    }\n\n    .list-item {\n      display: flex;\n      align-items: flex-start;\n      gap: 6px;\n    }\n\n    .list-item-text {\n      word-break: break-word;\n    }\n\n    .list-item-text-key {\n      font: var(--list-item-key-font);\n      text-transform: uppercase;\n    }\n\n    .list-item-text-value {\n      font: var(--list-item-value-font);\n    }\n\n    /*Table*/\n    .table-wrapper {\n      overflow: auto;\n    }\n\n    .table-thead {\n      position: sticky;\n      top: 0;\n      z-index: 9;\n    }\n\n    .table th {\n      width: 180px;\n      background-color: var(--widget-row-highlight-bg);\n      color: var(--widget-text-color);\n      font: var(--table-th-size);\n      padding: 6px 12px;\n      text-transform: uppercase;\n      vertical-align: top;\n      text-align: left;\n    }\n\n    .table tr:nth-child(even) {\n      background-color: var(--table-color-even-row);\n    }\n\n    .table-row-arrow {\n      display: flex;\n      height: 22px;\n      cursor: pointer;\n      transform: rotateX(180deg);\n    }\n\n    .expanded .table-row-arrow {\n      transform: rotateX(0deg);\n    }\n\n    .table td {\n      padding: 8px 12px;\n      font: var(--table-td-size);\n      color: var(--widget-text-color);\n      vertical-align: top;\n    }\n\n    .table-value-wrapper {\n      max-height: 180px;\n      overflow: auto;\n    }\n\n    .table-case-priority {\n      display: flex;\n      align-items: center;\n      gap: 6px\n    }\n\n    .nested-table thead tr th {\n      width: auto;\n    }\n  </style>\n\n</head>\n\n<body onload=\"main()\">\n<div class=\"wrapper\">\n  <ul class=\"list\">\n    <li class=\"list-item\"><span class=\"list-item-text list-item-text-key\">Total</span>\n      <span class=\"list-item-text list-item-text-value\" id=\"totalStats\"></span></li>\n    <li class=\"list-item\"><span\n      class=\"list-item-text list-item-text-key\">Malicious</span> <span\n      class=\"list-item-text list-item-text-value\" id=\"maliciousStats\"></span></li>\n    <li class=\"list-item\"><span\n      class=\"list-item-text list-item-text-key\">Incident</span> <span\n      class=\"list-item-text list-item-text-value\" id=\"incidentStats\"></span></li>\n    <li class=\"list-item\"><span\n      class=\"list-item-text list-item-text-key\">Important</span> <span\n      class=\"list-item-text list-item-text-value\" id=\"importantStats\"></span></li>\n    <li class=\"list-item\"><span class=\"list-item-text list-item-text-key\">Open</span>\n      <span class=\"list-item-text list-item-text-value\" id=\"openStats\"></span></li>\n  </ul>\n  <div class=\"table-wrapper\">\n    <table class=\"table\" id=\"dataTable\">\n      <thead class=\"table-thead\">\n      <tr>\n        <th style=\"max-width: 20px; min-width: 35px;\"></th>\n        <th style=\"max-width: 100px\">ID</th>\n        <th>Name</th>\n        <th>Status</th>\n        <th>Priority</th>\n        <th>Rule Generator Match</th>\n        <th>Entity Match</th>\n      </tr>\n      </thead>\n    </table>\n  </div>\n</div>\n\n</body>\n\n<script>\n  function main() {\n    const actionListData = [{stepInstanceName}.JsonResult];\n    let uri = actionListData.platform_url;\n\n    buildStats(actionListData, uri);\n    buildWidget(actionListData, uri);\n  }\n\n  // Constants for tooltip positioning\n  const tooltipGap = 25;\n  const tooltipTriangleHeight = 8;\n  const tooltipTriangleMinGap = 5;\n  const triangleWidth = 16;\n  let tooltipTimeout = undefined;\n\n  const tooltipDetectResizeObserver = new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      const target = entry.target;\n      if (target) {\n        const {offsetWidth, scrollWidth} = target;\n        if (scrollWidth > offsetWidth) {\n          target.addEventListener(\"mouseover\", createTooltipListener);\n          target.addEventListener(\"mouseout\", removeTooltipListener);\n        } else {\n          target.removeEventListener(\"mouseover\", createTooltipListener);\n          target.removeEventListener(\"mouseout\", removeTooltipListener);\n        }\n      }\n    }\n  });\n\n  function buildStats(actionListData) {\n    totalStats.innerHTML = actionListData[\"results\"].length;\n    maliciousStats.innerHTML = actionListData[\"stats\"][\"Malicious\"].toFixed(2) + \"%\";\n    incidentStats.innerHTML = actionListData[\"stats\"][\"Is Incident\"].toFixed(2) + \"%\";\n    importantStats.innerHTML = actionListData[\"stats\"][\"Is Important\"].toFixed(2) + \"%\";\n    openStats.innerHTML = actionListData[\"stats\"][\"Status Open\"].toFixed(2) + \"%\";\n  }\n\n  function buildWidget(actionListData, uri) {\n    actionListData[\"results\"].forEach((_case) => {\n      let table = document.getElementById(\"dataTable\");\n\n      let row = document.createElement(\"tr\");\n      row.onclick = function () {\n        let x = this.nextSibling;\n        if (x.style.display !== \"none\") {\n          x.style.display = \"none\";\n          this.cells[0].classList.remove(\"expanded\");\n        } else {\n          x.style.display = \"\";\n          this.cells[0].classList.add(\"expanded\");\n        }\n      };\n\n      let triangle = document.createElement(\"td\");\n      triangle.innerHTML = `<svg class=\"table-row-arrow\" width=\"24\" height=\"25\" viewBox=\"0 0 24 25\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M18.7925 16.2925C18.3824 16.7025 17.7176 16.7025 17.3075 16.2925L12.05 11.0349L6.79246 16.2925C6.38241 16.7025 5.71759 16.7025 5.30754 16.2925C4.89749 15.8824 4.89749 15.2176 5.30754 14.8075L11.3075 8.80754C11.7176 8.39749 12.3824 8.39749 12.7925 8.80754L18.7925 14.8075C19.2025 15.2176 19.2025 15.8824 18.7925 16.2925Z\" />\n        </svg>`;\n      row.appendChild(triangle);\n\n      let id = document.createElement(\"td\");\n      id.innerHTML =\n        \"<a class='link' target = \\\"_blank\\\" href =\\\"\" +\n        uri +\n        \"#/cases/\" +\n        _case[\"id\"] +\n        \"\\\">\" +\n        _case[\"id\"] +\n        \"</a>\";\n      row.appendChild(id);\n\n      let caseName = document.createElement(\"td\");\n      caseName.innerHTML = _case[\"name\"];\n      renderWithTooltip(caseName, _case[\"name\"]);\n      row.appendChild(caseName);\n\n      let caseStatus = document.createElement(\"td\");\n      caseStatus.innerHTML = _case[\"status\"];\n      if (_case[\"status\"] === \"Closed\") {\n        caseStatus.style.color = \"#fd7570\";\n      } else if (_case[\"status\"] === \"Open\") {\n        caseStatus.style.color = \"#54ab98\";\n      }\n      row.appendChild(caseStatus);\n\n      let casePriority = document.createElement(\"td\");\n\n      let prioritySpan = document.createElement(\"div\");\n      prioritySpan.classList.add(\"table-case-priority\");\n\n      const normalizedPriority = _case[\"priority\"].toLowerCase();\n\n      if (normalizedPriority === \"critical\") {\n        prioritySpan.innerHTML = `\n        <svg width=\"27\" height=\"6\" viewBox=\"0 0 27 6\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"3\" cy=\"3\" r=\"3\" fill=\"#EC453B\"/>\n            <circle cx=\"10\" cy=\"3\" r=\"3\" fill=\"#EC453B\"/>\n            <circle cx=\"17\" cy=\"3\" r=\"3\" fill=\"#EC453B\"/>\n            <circle cx=\"24\" cy=\"3\" r=\"3\" fill=\"#EC453B\"/>\n        </svg>\n        <span>Critical</span>\n    `;\n      } else if (normalizedPriority === \"high\") {\n        prioritySpan.innerHTML = `\n        <svg width=\"27\" height=\"6\" viewBox=\"0 0 27 6\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"3\" cy=\"3\" r=\"3\" fill=\"#FA903E\"/>\n            <circle cx=\"10\" cy=\"3\" r=\"3\" fill=\"#FA903E\"/>\n            <circle cx=\"17\" cy=\"3\" r=\"3\" fill=\"#FA903E\"/>\n            <circle cx=\"24\" cy=\"3\" r=\"3\" fill=\"#B2B6BD\"/>\n        </svg>\n        <span>High</span>\n    `;\n      } else if (normalizedPriority === \"medium\") {\n        prioritySpan.innerHTML = `\n        <svg width=\"27\" height=\"6\" viewBox=\"0 0 27 6\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"3\" cy=\"3\" r=\"3\" fill=\"#FFF371\"/>\n            <circle cx=\"10\" cy=\"3\" r=\"3\" fill=\"#FFF371\"/>\n            <circle cx=\"17\" cy=\"3\" r=\"3\" fill=\"#B2B6BD\"/>\n            <circle cx=\"24\" cy=\"3\" r=\"3\" fill=\"#B2B6BD\"/>\n        </svg>\n        <span\">Medium</span>\n    `;\n      } else if (normalizedPriority === \"low\") {\n        prioritySpan.innerHTML = `\n        <svg width=\"27\" height=\"6\" viewBox=\"0 0 27 6\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"3\" cy=\"3\" r=\"3\" fill=\"#78D9EC\"/>\n            <circle cx=\"10\" cy=\"3\" r=\"3\" fill=\"#B2B6BD\"/>\n            <circle cx=\"17\" cy=\"3\" r=\"3\" fill=\"#B2B6BD\"/>\n            <circle cx=\"24\" cy=\"3\" r=\"3\" fill=\"#B2B6BD\"/>\n        </svg>\n        <span>Low</span>\n    `;\n      } else if (normalizedPriority === \"informative\") {\n        prioritySpan.innerHTML = `\n        <svg width=\"27\" height=\"6\" viewBox=\"0 0 27 6\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"3\" cy=\"3\" r=\"3\" fill=\"#B2B6BD\"/>\n            <circle cx=\"10\" cy=\"3\" r=\"3\" fill=\"#B2B6BD\"/>\n            <circle cx=\"17\" cy=\"3\" r=\"3\" fill=\"#B2B6BD\"/>\n            <circle cx=\"24\" cy=\"3\" r=\"3\" fill=\"#B2B6BD\"/>\n        </svg>\n        <span>Informative</span>\n    `;\n      }\n\n      casePriority.appendChild(prioritySpan);\n      row.appendChild(casePriority);\n\n      let caseRuleMatch = document.createElement(\"td\");\n      if (_case[\"matching_criteria\"][\"ruleGenerator\"]) {\n        caseRuleMatch.innerHTML = `<svg width=\"27\" height=\"6\" viewBox=\"0 0 27 6\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"3\" cy=\"3\" r=\"3\" fill=\"#54ab98\"/>\n        </svg>`;\n      } else {\n        caseRuleMatch.innerHTML = `<svg width=\"27\" height=\"6\" viewBox=\"0 0 27 6\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"3\" cy=\"3\" r=\"3\" fill=\"#fd7570\"/>\n        </svg>`;\n      }\n      row.appendChild(caseRuleMatch);\n      table.appendChild(row);\n\n      let caseEntityMatch = document.createElement(\"td\");\n      if (_case[\"matching_criteria\"][\"entities\"]) {\n        caseEntityMatch.innerHTML = `<svg width=\"27\" height=\"6\" viewBox=\"0 0 27 6\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"3\" cy=\"3\" r=\"3\" fill=\"#54ab98\"/>\n        </svg>`;\n      } else {\n        caseEntityMatch.innerHTML = `<svg width=\"27\" height=\"6\" viewBox=\"0 0 27 6\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"3\" cy=\"3\" r=\"3\" fill=\"#fd7570\"/>\n        </svg>`;\n      }\n      row.appendChild(caseEntityMatch);\n      table.appendChild(row);\n\n      let hiddenRow = document.createElement(\"tr\");\n      hiddenRow.style.display = \"none\";\n\n      let hiddenTd = document.createElement(\"td\");\n      hiddenTd.colSpan = 7;\n      hiddenRow.appendChild(hiddenTd);\n\n      let nestedTable = document.createElement(\"table\");\n      nestedTable.classList.add(\"nested-table\");\n      hiddenTd.append(nestedTable);\n\n      let hiddenTableHead = document.createElement(\"thead\");\n      let hiddenTableHeaderRow = document.createElement(\"tr\");\n\n      let hiddenHeaders = [\n        \"Last Modification\",\n        \"Assigned User\",\n        \"Matched Entities\",\n        \"Tags\",\n        \"Close Root Cause\",\n        \"Close Reason\",\n      ];\n\n      hiddenHeaders.forEach(header => {\n        let th = document.createElement(\"th\");\n        th.innerText = header;\n        if (header === \"Matched Entities\" || header === \"Tags\") {\n          th.style.width = \"220px\";\n        }\n        hiddenTableHeaderRow.appendChild(th);\n      });\n\n      hiddenTableHead.appendChild(hiddenTableHeaderRow);\n      nestedTable.appendChild(hiddenTableHead);\n\n      let hiddenTableBody = document.createElement(\"tbody\");\n      let valueRow = document.createElement(\"tr\");\n\n      let fields = [\n        {\n          value: _case[\"last modified\"] ? new Date(_case[\"last modified\"]).toLocaleString() : \"N/A\",\n          renderTooltip: true,\n        },\n        {value: _case[\"assigned user\"] || \"N/A\", renderTooltip: true},\n        {\n          value: _case[\"matched_entities\"]\n            ? _case[\"matched_entities\"].map(entity => {\n              let div = document.createElement(\"div\");\n              renderWithTooltip(div, entity.entity);\n              div.textContent = entity.entity;\n              if (entity.isSuspicious) {\n                div.style.color = \"#FF5A50\";\n              }\n              return div;\n            })\n            : [\"N/A\"],\n        },\n        {\n          value: _case[\"tags\"].length > 0\n            ? _case[\"tags\"]\n              .map(tag => {\n                let div = document.createElement(\"div\");\n                renderWithTooltip(div, tag);\n                div.textContent = tag;\n                return div;\n              })\n            : [\"N/A\"],\n        },\n        {\n          value: (_case[\"case_closure_details\"] && _case[\"case_closure_details\"][\"root_cause\"]) || \"N/A\",\n          renderTooltip: true,\n        },\n        {\n          value: (_case[\"case_closure_details\"] && _case[\"case_closure_details\"][\"reason\"]) || \"N/A\",\n          renderTooltip: true,\n        },\n      ];\n\n      fields.forEach(field => {\n        let td = document.createElement(\"td\");\n        let wrap = document.createElement(\"div\");\n        wrap.classList.add(\"table-value-wrapper\");\n\n        if (field.renderTooltip) {\n          renderWithTooltip(td, field.value);\n        } else if (Array.isArray(field.value)) {\n          field.value.forEach(item => {\n            if (item instanceof Node) {\n              wrap.appendChild(item);\n              td.appendChild(wrap);\n            } else {\n              let div = document.createElement(\"div\");\n              div.innerHTML = item;\n              wrap.appendChild(div);\n              td.appendChild(wrap);\n            }\n          });\n        } else {\n          wrap.innerHTML = field.value;\n        }\n\n        valueRow.appendChild(td);\n      });\n\n      hiddenTableBody.appendChild(valueRow);\n      nestedTable.appendChild(hiddenTableBody);\n      table.appendChild(hiddenRow);\n    });\n  }\n\n  /**\n   * Creates a tooltip with given text and position.\n   */\n  function createTooltip(text, x, y, trianglePointX, placeAtBottom, contentOverflowWindow) {\n    removeTooltip();\n    const tooltip = document.createElement(\"div\");\n    tooltip.classList.add(\"tooltip\");\n    tooltip.textContent = text;\n    tooltip.style.left = `${x}px`;\n    tooltip.style.top = `${y}px`;\n    if (contentOverflowWindow) {\n      tooltip.style.right = `${tooltipGap}px`;\n    }\n    const tooltipTriangle = document.createElement(\"span\");\n    tooltipTriangle.classList.add(\"tooltip-triangle\");\n    tooltipTriangle.style.left = `${trianglePointX}px`;\n    if (placeAtBottom) {\n      tooltipTriangle.style.top = \"-8px\";\n      tooltipTriangle.style.borderTop = \"0\";\n      tooltipTriangle.style.borderBottom = \"solid 8px rgb(195, 210, 232)\";\n    }\n    tooltip.append(tooltipTriangle);\n    document.body.append(tooltip);\n  }\n\n  /**\n   * Removes any existing tooltip from the DOM.\n   */\n  function removeTooltip() {\n    const tooltip = document.querySelectorAll(\".tooltip\");\n    tooltip.forEach((item) => {\n      if (item) {\n        item.remove();\n      }\n    });\n  }\n\n  /**\n   * Sets a timeout to calculate and show tooltip position after a delay.\n   */\n  function createTooltipListener(event) {\n    tooltipTimeout = setTimeout(() => calculateTooltipPosition(event), 1000);\n  }\n\n  /**\n   * Clears any existing tooltip timeout and removes the tooltip.\n   */\n  function removeTooltipListener() {\n    if (tooltipTimeout) {\n      clearTimeout(tooltipTimeout);\n    }\n    removeTooltip();\n  }\n\n  /**\n   * Calculates and positions the tooltip relative to the event target.\n   */\n  function calculateTooltipPosition(event) {\n    const target = event.target;\n    if (!target) {\n      return;\n    }\n    const viewportWidth = window.innerWidth;\n    const rect = target.getBoundingClientRect();\n    const tooltipContent = document.createElement(\"div\");\n    tooltipContent.classList.add(\"tooltip\");\n    tooltipContent.style.top = \"0\";\n    tooltipContent.textContent = target.textContent;\n    document.body.appendChild(tooltipContent);\n    let contentOverflowWindow = false;\n    // Determine if window width would not be enough for content of tooltip\n    if (tooltipGap * 2 + tooltipContent.offsetWidth >= viewportWidth) {\n      // setting left, right positions to get correct tooltipContentWidth and tooltipContentHeight\n      tooltipContent.style.left = `${tooltipGap}px`;\n      tooltipContent.style.right = `${tooltipGap}px`;\n      contentOverflowWindow = true;\n    }\n    const tooltipContentWidth = tooltipContent.offsetWidth;\n    const tooltipContentHeight = tooltipContent.offsetHeight;\n    tooltipContent.remove();\n    const elementMidX = rect.left + (rect.width / 2);\n    const placeOnRight = elementMidX + tooltipContentWidth / 2 + tooltipGap > viewportWidth;\n    const x = Math.max(tooltipGap, placeOnRight ? viewportWidth - tooltipContentWidth - tooltipGap : elementMidX - tooltipContentWidth / 2);\n    const placeAtBottom = rect.top < tooltipContentHeight;\n    const y = placeAtBottom ? rect.bottom + tooltipTriangleHeight : rect.top - tooltipContentHeight;\n    // Calculating trianglePointX relative to window width, to guarantee that it is not out of window\n    const trianglePointX = Math.min(Math.max(elementMidX - x, tooltipTriangleMinGap), tooltipContentWidth - tooltipTriangleMinGap - triangleWidth);\n    createTooltip(target.textContent, x, y, trianglePointX, placeAtBottom, contentOverflowWindow);\n  }\n\n  /**\n   * Renders an item with text and sets up tooltip behavior.\n   */\n  function renderWithTooltip(item, text) {\n    item.innerHTML = text;\n    item.classList.add(\"text-ellipsis\");\n    tooltipDetectResizeObserver.observe(item);\n  }\n</script>\n</html>\n",
                        "htmlHeight": 400,
                        "safeRendering": false,
                        "type": 3,
                        "widgetDefinitionScope": 2
                    }
                }
            ],
            "roles": [
                1
            ],
            "creationTimeUnixTimeInMs": 1751246678688
        }
    ],
    "creationSource": 1
}